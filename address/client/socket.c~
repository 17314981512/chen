

#include<stdio.h>
#include<stdlib.h>
#include <sys/types.h>          
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include "../address.h"
#include "../login.h"
int InitNet()
{
	struct sockaddr_in server_addr;
	int sockfd=socket(PF_INET,SOCK_STREAM,0);
	if(sockfd==-1)
	{
		perror("error");
		exit(1);
	}
	memset(&server_addr,0,sizeof(server_addr));
	server_addr.sin_family=PF_INET;
	server_addr.sin_port=htons(11111);
	server_addr.sin_addr.s_addr=inet_addr("192.168.1.111");//nanopiaddress
	int ret=connect(sockfd,(struct sockaddr *)&server_addr,sizeof(server_addr));
	if(-1==ret)
	{
		perror("connect");
		exit(1);
	}
	printf("success\n");
	return sockfd;
}
void login_on(fd)
{
	acc c;
	printf("please input the account:\n");
	scanf("%s",c.number);
	printf("please input the passward:\n");
	scanf("%s",c.passward);
	c.cmd=LOGINON;
	int ret=send(fd,&c,sizeof(c),0);
	if(-1==ret)
	{
		perror("send");
	}
	ret=recv(fd,&c,sizeof(c),0);
	if(c.result==1)
	{
		main_handler();
	}
	else
	{
		printf("The number or passward is error!\n");
	}
	sleep(1);
}
void register_info(int fd)
{
	acc c;
	printf("please input the account and the passward you want to register\n");
	scanf("%s%s",c.number,c.passward);
	c.cmd=REGISTER;
	int ret=send(fd,&c,sizeof(c),0);
	if(ret==-1)
	{
		perror("send");
	}
	
}
void add_info(int fd)
{
	Chat c;
	printf("please input the name and telephone\n");
	scanf("%s%s",c.name,c.tel);
	c.cmd=ADDINFO;
	int ret=send(fd,&c,sizeof(c),0);
	if(-1==ret)
	{
		perror("send");
	}
	printf("add success!\n");
	sleep(3);
}
void exit_client(int fd)
{
	//tongzhi fuwuqi xiaxian
	//guanbi tcp lianjie
	//tichu chengxu
	Chat c;
	c.cmd=EXIT;
	int ret=send(fd,&c,sizeof(c),0);
	if(-1==ret)
	{
		perror("error!\n");
	}
	close(fd);
	exit(0);
}
void show_info(int fd)
{
	Chat c;
	c.cmd=SHOWINFO;
	int ret=send(fd,&c,sizeof(c),0);
	if(-1==ret)
	{
		perror("send");
	}
	int i=0;
	while(1)
	{
		memset(&c,0,sizeof(c));
		ret=recv(fd,&c,sizeof(c),0);
		i++;
		if(-1==ret)
		{
			perror("recv");
		}	
		if(!strcmp(c.name,"bye")&&!strcmp(c.tel,"bye"))
		{
			break;
		}
		printf("name:%s   tele:%s\n",c.name,c.tel);
	}
	if(i==1)
	{
		printf("the book is null!\n");
	}
	sleep(3);
}
void delete_info(int fd)
{
	Chat c;
	int flag=0;
	c.cmd=DELETEINFO;
	printf("please input the name want to delete\n");
	scanf("%s",c.name);
	int ret=send(fd,&c,sizeof(c),0);
	if(-1==ret)
	{
		perror("send");
	}
	int i;
	ret=recv(fd,&c,sizeof(c),0);
	if(-1==ret)
	{
		perror("recv");
	}
	if(c.result==0)
		flag=0;
	if(c.result==1)
		flag=1;
	if(flag=1)
		printf("delete success!\n");
	else
		printf("can not find the name!\n");
	sleep(3);
}
void update_info(int fd)
{
	Chat c;
	c.cmd=UPDATEINFO;
	printf("please input the name want to update:\n");
	scanf("%s",c.name);
	printf("please input the tel:\n");
	scanf("%s",c.tel);
	int ret=send(fd,&c,sizeof(c),0);
	if(ret==-1)
	{
		printf("send");
	}
	ret=recv(fd,&c,sizeof(c),0);
	if(ret==-1)
	{
		printf("recv");
	}
/*	if(c.result==0)
	{
		printf("can not find the name!\n");
		break;
	}
	if(c.result==1)
	{
		printf("update success!\n");
		break;
	}*/
	sleep(3);
}
void research_info(int fd)
{
	Chat c;
	c.cmd=SEARCHINFO;
	printf("please input the name you want to find:\n");
	scanf("%s",c.name);
	int ret=send(fd,&c,sizeof(c),0);
	if(-1==ret)
	{
		perror("send");
	}
	while(1)
	{
	memset(&c,0,sizeof(c));
	ret=recv(fd,&c,sizeof(c),0);
	if(ret==-1)
	{
		perror("recv");
	}
	if(c.result==0)
	{
		printf("can not find the name\n");
		break;
	}
	printf("the information you want to find:\n");		
	printf("name:%s    tele:%s\n",c.name,c.tel);
	break;
	}
	sleep(3);
}
